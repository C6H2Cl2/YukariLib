package c6h2cl2.yukarilib

import c6h2cl2.yukarilib.common.CommonProxy
import com.mojang.util.UUIDTypeAdapter
import net.minecraft.client.Minecraft
import net.minecraft.launchwrapper.Launch
import net.minecraftforge.common.config.Configuration
import net.minecraftforge.fml.common.Mod
import net.minecraftforge.fml.common.ModMetadata
import net.minecraftforge.fml.common.SidedProxy
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent
import java.io.BufferedReader
import java.io.File
import java.io.IOException
import java.io.InputStreamReader
import java.net.URL

/**
 * @author C6H2Cl2
 */
private const val MOD_ID = "yukarilib"
private const val MOD_NAME = "YukariLib"
private const val VERSION = "1.1.0"

@Mod(modid = MOD_ID, name = MOD_NAME, version = VERSION, useMetadata = true)
@Suppress("UNUSED")
class YukariLibCore {
    companion object {
        @JvmStatic
        @Mod.Metadata
        lateinit var METADATA: ModMetadata
        @JvmStatic
        @SidedProxy(clientSide = "c6h2cl2.yukarilib.client.ClientProxy", serverSide = "c6h2cl2.yukarilib.common.CommonProxy")
        lateinit var PROXY: CommonProxy
        var allowOffline = false
            private set
    }

    @Mod.EventHandler
    fun preinit(event: FMLPreInitializationEvent) {
        check(event)
        loadMeta()
        getConfig()
    }

    private fun check(event: FMLPreInitializationEvent) {
        if (event.side.isClient && Launch.blackboard["fml.deobfuscatedEnvironment"]?.equals(true) == false) {
            var purchased = true
            val session = Minecraft.getMinecraft().session
            val userName = session.username
            val url = URL("https://api.mojang.com/users/profiles/minecraft/$userName")
            try {
                BufferedReader(InputStreamReader(url.openStream())).use {
                    purchased = it.readLine() != null
                }
            } catch (e: IOException) {
                return
            }

            try {
                UUIDTypeAdapter.fromString(session.playerID)
            } catch (e: Throwable) {
                purchased = false
            }
            purchased = (purchased && !Minecraft.getMinecraft().isDemo)
            if (!purchased) {
                throw PlayerNotOfficialPurchasedException()
            }
        }
    }

    private fun getConfig() {
        val cfg = Configuration(File(PROXY.getDir(), "config/yukarilib.cfg"))
        cfg.load()
        allowOffline = cfg.getBoolean("Allow offline mode", "common", true, "Set false to prohibit playing offline")
        cfg.save()
    }

    private fun loadMeta() {
        METADATA.modId = MOD_ID
        METADATA.name = MOD_NAME
        METADATA.version = VERSION
        METADATA.authorList.add("C6H2Cl2")
        METADATA.description = "This is the library for Kotlin-Modding"
        METADATA.autogenerated = false
    }
}