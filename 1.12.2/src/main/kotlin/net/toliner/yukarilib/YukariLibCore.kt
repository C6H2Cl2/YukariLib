package net.toliner.yukarilib

import net.minecraftforge.fml.common.*
import net.minecraftforge.fml.common.event.FMLConstructionEvent
import net.minecraftforge.fml.common.event.FMLInitializationEvent
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent
import net.minecraftforge.fml.relauncher.Side
import net.toliner.yukarilib.YukariLibCore.MOD_ID
import net.toliner.yukarilib.YukariLibCore.MOD_NAME
import net.toliner.yukarilib.YukariLibCore.MOD_VERSION
import java.lang.reflect.Field
import java.lang.reflect.Method

/**
 * @author kojin15.
 */
@Mod(modid = MOD_ID, name = MOD_NAME, version = MOD_VERSION, acceptedMinecraftVersions = "[1.12]",
        modLanguage = "kotlin", modLanguageAdapter = "net.toliner.yukarilib.KotlinAdapter",
        useMetadata = true)
object YukariLibCore {
    const val MOD_ID = "yukarilib"
    const val MOD_NAME = "YukariLib"
    const val MOD_VERSION = "2.0.0"

    @Mod.Metadata
    private lateinit var METADATA: ModMetadata

    @Mod.EventHandler
    fun construct(event: FMLConstructionEvent) {
        METADATA.modId = MOD_ID
        METADATA.name = MOD_NAME
        METADATA.version = MOD_VERSION
        METADATA.authorList.add("toliner")
        METADATA.authorList.add("kojin15")
        METADATA.description = "An helper library for Kotlin modders!"
        METADATA.autogenerated = false
    }

    @Mod.EventHandler
    fun preInit(event: FMLPreInitializationEvent) {

    }

    @Mod.EventHandler
    fun init(event: FMLInitializationEvent) {

    }

    @Mod.EventHandler
    fun postInit(event: FMLPostInitializationEvent) {

    }
}

class KotlinAdapter : ILanguageAdapter {
    override fun supportsStatics(): Boolean = false

    override fun setProxy(target: Field, proxyTarget: Class<*>, proxy: Any) {
        target.set(proxyTarget.kotlin.objectInstance, proxy)
    }

    override fun getNewInstance(container: FMLModContainer, objectClass: Class<*>, classLoader: ClassLoader, factoryMarkedAnnotation: Method?): Any? {
        return objectClass.kotlin.objectInstance ?: objectClass.newInstance()
    }

    override fun setInternalProxies(mod: ModContainer?, side: Side?, loader: ClassLoader?) = Unit
}