<root>
    <item name='akka.japi.pf.DeciderBuilder akka.japi.pf.PFBuilder&lt;java.lang.Throwable,akka.actor.SupervisorStrategy.Directive&gt; matchAny(akka.japi.pf.FI.Apply&lt;java.lang.Object,akka.actor.SupervisorStrategy.Directive&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.PFBuilder akka.japi.pf.PFBuilder&lt;I,R&gt; matchEquals(P, akka.japi.pf.FI.Apply&lt;P,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(java.util.List&lt;java.lang.Object&gt;, java.lang.Class&lt;Q&gt;, akka.japi.pf.FI.Apply2&lt;java.lang.Object,Q,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(java.lang.Class&lt;P&gt;, java.lang.Class&lt;Q&gt;, akka.japi.pf.FI.Apply2&lt;P,Q,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.Match akka.japi.pf.PFBuilder&lt;F,T&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.Apply&lt;P,T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitPFBuilder akka.japi.pf.UnitPFBuilder&lt;I&gt; matchEquals(P, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(java.lang.Class&lt;P&gt;, java.lang.Class&lt;Q&gt;, akka.japi.pf.FI.TypedPredicate2&lt;P,Q&gt;, akka.japi.pf.FI.Apply2&lt;P,Q,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.PFBuilder akka.japi.pf.PFBuilder&lt;I,R&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.Apply&lt;P,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitMatch&lt;F&gt; create(akka.japi.pf.UnitPFBuilder&lt;F&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; anyEvent(akka.japi.pf.FI.Apply2&lt;java.lang.Object,D,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStopBuilder akka.japi.pf.FSMStopBuilder&lt;S,D&gt; stop(akka.actor.FSM.Reason, akka.japi.pf.FI.UnitApply2&lt;S,D&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMTransitionHandlerBuilder akka.japi.pf.FSMTransitionHandlerBuilder&lt;S&gt; state(S, S, akka.japi.pf.FI.UnitApply2&lt;S,S&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.CaseStatement$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate2&lt;P,D&gt;, akka.japi.pf.FI.Apply2&lt;P,D,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; eventEquals(P, java.lang.Class&lt;Q&gt;, akka.japi.pf.FI.Apply2&lt;P,Q,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.Match akka.japi.pf.PFBuilder&lt;F,T&gt; matchAny(akka.japi.pf.FI.Apply&lt;java.lang.Object,T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(java.util.List&lt;java.lang.Object&gt;, akka.japi.pf.FI.Apply2&lt;java.lang.Object,D,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitPFBuilder&lt;F&gt; matchAny(akka.japi.pf.FI.UnitApply&lt;java.lang.Object&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitPFBuilder&lt;F&gt; matchEquals(P, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitPFBuilder akka.japi.pf.UnitPFBuilder&lt;I&gt; matchAny(akka.japi.pf.FI.UnitApply&lt;java.lang.Object&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(akka.japi.pf.FI.TypedPredicate2&lt;java.lang.Object,D&gt;, akka.japi.pf.FI.Apply2&lt;java.lang.Object,D,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.Match akka.japi.pf.PFBuilder&lt;F,T&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.Apply&lt;P,T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.DeciderBuilder akka.japi.pf.PFBuilder&lt;java.lang.Throwable,akka.actor.SupervisorStrategy.Directive&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.Apply&lt;P,akka.actor.SupervisorStrategy.Directive&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.ReceiveBuilder akka.japi.pf.UnitPFBuilder&lt;java.lang.Object&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.ReceiveBuilder akka.japi.pf.UnitPFBuilder&lt;java.lang.Object&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitPFBuilder&lt;F&gt; matchEquals(P, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStopBuilder akka.japi.pf.FSMStopBuilder&lt;S,D&gt; stop(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.UnitApply3&lt;P,S,D&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.PFBuilder akka.japi.pf.PFBuilder&lt;I,R&gt; matchAny(akka.japi.pf.FI.Apply&lt;java.lang.Object,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMTransitionHandlerBuilder akka.japi.pf.FSMTransitionHandlerBuilder&lt;S&gt; state(S, S, akka.japi.pf.FI.UnitApplyVoid)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.ReceiveBuilder akka.japi.pf.UnitPFBuilder&lt;java.lang.Object&gt; matchAny(akka.japi.pf.FI.UnitApply&lt;java.lang.Object&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitPFBuilder akka.japi.pf.UnitPFBuilder&lt;I&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.ReceiveBuilder akka.japi.pf.UnitPFBuilder&lt;java.lang.Object&gt; matchEquals(P, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.Match akka.japi.pf.Match&lt;F,T&gt; create(akka.japi.pf.PFBuilder&lt;F,T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; eventEquals(P, akka.japi.pf.FI.Apply2&lt;P,D,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.ReceiveBuilder akka.japi.pf.UnitPFBuilder&lt;java.lang.Object&gt; matchEquals(P, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitPFBuilder akka.japi.pf.UnitPFBuilder&lt;I&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FI.UnitApply void apply(I) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.japi.pf.PFBuilder akka.japi.pf.PFBuilder&lt;I,R&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.Apply&lt;P,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.DeciderBuilder akka.japi.pf.PFBuilder&lt;java.lang.Throwable,akka.actor.SupervisorStrategy.Directive&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.Apply&lt;P,akka.actor.SupervisorStrategy.Directive&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitPFBuilder&lt;F&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FI.Apply R apply(I) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.japi.pf.FI.TypedPredicate boolean defined(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitMatch&lt;F&gt; create(akka.japi.pf.UnitPFBuilder&lt;F&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitPFBuilder akka.japi.pf.UnitPFBuilder&lt;I&gt; matchEquals(P, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStopBuilder akka.japi.pf.FSMStopBuilder&lt;S,D&gt; stop(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.TypedPredicate&lt;P&gt;, akka.japi.pf.FI.UnitApply3&lt;P,S,D&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.FSMStateFunctionBuilder akka.japi.pf.FSMStateFunctionBuilder&lt;S,D&gt; event(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.Apply2&lt;P,D,akka.actor.FSM.State&lt;S,D&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.Match akka.japi.pf.Match&lt;F,T&gt; create(akka.japi.pf.PFBuilder&lt;F,T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.Match akka.japi.pf.PFBuilder&lt;F,T&gt; matchEquals(P, akka.japi.pf.FI.Apply&lt;P,T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.japi.pf.UnitMatch akka.japi.pf.UnitPFBuilder&lt;F&gt; match(java.lang.Class&lt;P&gt;, akka.japi.pf.FI.UnitApply&lt;P&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
