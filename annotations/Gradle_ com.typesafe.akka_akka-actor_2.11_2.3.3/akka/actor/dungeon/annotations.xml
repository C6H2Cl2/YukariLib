<root>
    <item name='akka.actor.dungeon.Dispatch akka.actor.ActorCell start()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling scala.PartialFunction&lt;java.lang.Throwable,scala.runtime.BoxedUnit&gt; handleNonFatalOrInterruptedException(scala.Function1&lt;java.lang.Throwable,scala.runtime.BoxedUnit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Creation$ akka.actor.dungeon.ChildrenContainer.Creation apply()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.dungeon.ChildrenContainer.SuspendReason waitingForChildrenOrNull(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.UndefinedUidActorRef void $bang(java.lang.Object, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1..anonfun.apply.mcV.sp.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void akka$actor$dungeon$FaultHandling$$finishTerminate(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Creation$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.ActorRef actorOf(akka.actor.Props)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ scala.collection.immutable.Iterable&lt;akka.actor.ActorRef&gt; children()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class scala.PartialFunction handleNonFatalOrInterruptedException(akka.actor.ActorCell, scala.Function1)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.3 akka.actor.ActorCell akka$actor$dungeon$FaultHandling$$anonfun$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer akka.actor.dungeon.ChildrenContainer add(java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class akka.actor.ActorRef unwatch(akka.actor.ActorCell, akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Termination$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.UserRequest$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.tellWatchersWeDied.2 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.unwatchWatchedActors.1..anonfun.apply.mcV.sp.1 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.ActorRef attachChild(akka.actor.Props, java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void faultCreate(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.faultCreate.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.3 3(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.4 4(akka.actor.ActorCell, akka.actor.Actor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout$ scala.Tuple2&lt;scala.concurrent.duration.Duration,akka.actor.Cancellable&gt; emptyReceiveTimeoutData()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout.class scala.concurrent.duration.Duration receiveTimeout(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.7 7(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void $init$(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer akka.actor.dungeon.ChildrenContainer add(java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.Option getChildByName(akka.actor.ActorCell, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.InternalActorRef getSingleChild(akka.actor.ActorCell, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.terminate.2 2(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.Option getChildByRef(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef actorOf(akka.actor.ActorCell, akka.actor.Props)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer unreserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Termination$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.hasNonLocalAddress.1.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void faultRecreate(akka.actor.ActorCell, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class akka.actor.dungeon.ChildrenContainer add(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer, java.lang.String, akka.actor.ChildRestartStats) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.ActorRef actorOf(akka.actor.Props, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.InternalActorRef getSingleChild(akka.actor.ActorCell, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ akka.actor.dungeon.ChildrenContainer reserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void remWatcher(akka.actor.ActorCell, akka.actor.ActorRef, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Creation java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class akka.actor.ActorRef unwatch(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class akka.dispatch.Mailbox swapMailbox(akka.actor.ActorCell, akka.dispatch.Mailbox) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.finishRecreate.1..anonfun.5 5(akka.actor.dungeon.FaultHandling..anonfun.finishRecreate.1, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef attachChild(akka.actor.ActorCell, akka.actor.Props, java.lang.String, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Recreation akka.actor.dungeon.ChildrenContainer.Recreation copy(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void addressTerminated(akka.actor.ActorCell, akka.actor.Address) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Recreation java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ActorRef&gt; children()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.watchedActorTerminated.1 1(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void faultSuspend(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class void stop(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch akka.actor.ActorRef watch(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer add(java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.6 6(akka.actor.ActorCell, java.lang.Throwable, scala.collection.immutable.Iterable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children void stop(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void handleInvokeFailure(akka.actor.ActorCell, scala.collection.immutable.Iterable, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addWatcher.1 1(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1 akka.actor.ActorCell akka$actor$dungeon$DeathWatch$$anonfun$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class akka.actor.dungeon.ChildrenContainer add(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer, java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class java.lang.Iterable getChildren(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class boolean unreserveChild(akka.actor.ActorCell, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer reserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ scala.collection.immutable.Iterable&lt;akka.actor.ChildRestartStats&gt; stats()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ActorRef&gt; children()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer$ akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer apply(scala.collection.immutable.TreeMap&lt;java.lang.String,akka.actor.ChildStats&gt;, scala.collection.immutable.Set&lt;akka.actor.ActorRef&gt;, akka.actor.dungeon.ChildrenContainer.SuspendReason)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.akka.actor.dungeon.DeathWatch..removeFromSet.1 boolean apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class void suspend(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.InternalActorRef getSingleChild(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef attachChild(akka.actor.ActorCell, akka.actor.Props, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.finishRecreate.1 akka.actor.ActorCell akka$actor$dungeon$FaultHandling$$anonfun$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch akka.actor.ActorRef watch(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void terminatedQueuedFor(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class boolean isTerminated(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.tellWatchersWeDied.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.1 1(akka.actor.ActorCell, akka.actor.Actor, scala.Option, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void faultResume(akka.actor.ActorCell, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class void $init$(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch akka.actor.ActorRef unwatch(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Children..anonfun.resumeChildren.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer scala.Option&lt;akka.actor.ChildRestartStats&gt; getByRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.Option initChild(akka.actor.ActorCell, akka.actor.ActorRef) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Creation$ java.lang.Object apply()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch akka.actor.ActorRef unwatch(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout.class void checkReceiveTimeout(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class boolean setChildrenTerminationReason(akka.actor.ActorCell, akka.actor.dungeon.ChildrenContainer.SuspendReason) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class boolean reserveChild(akka.actor.ActorCell, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Termination$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch void receivedTerminated(akka.actor.Terminated) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.faultRecreate.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Recreation$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.UserRequest$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class void stop(akka.actor.ActorCell, akka.actor.ActorRef) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef getChild(akka.actor.ActorCell, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch..anonfun.handleException.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout.class void cancelReceiveTimeout(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.UndefinedUidActorRef java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.collection.immutable.Iterable getAllChildStats(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void sendTerminated$1(akka.actor.ActorCell, boolean, akka.actor.ActorRef) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class boolean hasMessages(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch akka.actor.ActorCell init(boolean, akka.dispatch.MailboxType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.watch.1 1(akka.actor.ActorCell, akka.actor.InternalActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.ChildrenIterable akka.actor.ActorRef apply(akka.actor.ChildStats) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.3 3(akka.actor.ActorCell, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.4 void apply(java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling void handleFailure(akka.dispatch.sysmsg.Failed) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.unwatchWatchedActors.1..anonfun.apply.mcV.sp.1 1(akka.actor.dungeon.DeathWatch..anonfun.unwatchWatchedActors.1) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.tellWatchersWeDied.1 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class void stop(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.hasNonLocalAddress.1.2 2(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer scala.Option&lt;akka.actor.ChildRestartStats&gt; getByRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void terminate(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.ChildRestartsIterable java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.UndefinedUidActorRef UndefinedUidActorRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch void sendMessage(akka.dispatch.Envelope) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class akka.actor.ActorRef watch(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef attachChild(akka.actor.ActorCell, akka.actor.Props, java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Recreation$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children scala.Option&lt;akka.actor.ChildRestartStats&gt; initChild(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Recreation$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class scala.collection.immutable.Set akka$actor$dungeon$DeathWatch$$removeFromSet(akka.actor.ActorCell, akka.actor.ActorRef, scala.collection.immutable.Set) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class akka.actor.ActorCell start(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ChildRestartStats&gt; stats()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class void sendMessage(akka.actor.ActorCell, akka.dispatch.Envelope) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer akka.actor.dungeon.ChildrenContainer reserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef actorOf(akka.actor.ActorCell, akka.actor.Props, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.Option initChild(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class akka.actor.ActorCell start(akka.actor.ActorCell)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.terminate.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer akka.actor.dungeon.ChildrenContainer reserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.ChildrenIterable java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.UserRequest$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Creation$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ChildRestartStats&gt; stats()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ akka.actor.dungeon.ChildrenContainer add(java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ChildRestartStats&gt; stats()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Children..anonfun.resumeChildren.1 void apply(akka.actor.ChildRestartStats) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void addWatcher(akka.actor.ActorCell, akka.actor.ActorRef, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class void $init$(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.UndefinedUidActorRef akka.actor.InternalActorRef getParent()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef actorOf(akka.actor.ActorCell, akka.actor.Props, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class akka.actor.dungeon.ChildrenContainer reserve(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ scala.collection.immutable.Iterable&lt;akka.actor.ChildRestartStats&gt; stats()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class boolean isTerminating(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children..anonfun.makeChild.2 boolean apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.unwatch.1 1(akka.actor.ActorCell, akka.actor.InternalActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.unwatchWatchedActors.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer scala.Option&lt;akka.actor.ChildRestartStats&gt; getByRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void unwatchWatchedActors(akka.actor.ActorCell, akka.actor.Actor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.tellWatchersWeDied.2 2(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.3..anonfun.apply.1 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.tellWatchersWeDied.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.akka.actor.dungeon.DeathWatch..removeFromSet.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef actorOf(akka.actor.ActorCell, akka.actor.Props, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class void restart(akka.actor.ActorCell, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class void resume(akka.actor.ActorCell, java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.2 boolean apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children..anonfun.makeChild.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef attachChild(akka.actor.ActorCell, akka.actor.Props, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer$ java.lang.Object apply(java.lang.Object, java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.faultCreate.2 2(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.collection.immutable.Iterable children(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class akka.actor.ActorCell init(akka.actor.ActorCell, boolean, akka.dispatch.MailboxType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.remWatcher.1 1(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.4 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.faultCreate.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer shallDie(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class int numberOfMessages(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1..anonfun.apply.mcV.sp.2 2(akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Recreation$ akka.actor.dungeon.ChildrenContainer.Recreation apply(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef actorOf(akka.actor.ActorCell, akka.actor.Props) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class akka.actor.dungeon.ChildrenContainer reserve(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class boolean isNormal(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.Option removeChildAndGetStateChange(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class void resumeChildren(akka.actor.ActorCell, java.lang.Throwable, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.ActorRef attachChild(akka.actor.Props, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void handleFailure(akka.actor.ActorCell, akka.dispatch.sysmsg.Failed) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class akka.actor.ActorCell init(akka.actor.ActorCell, boolean, akka.dispatch.MailboxType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class akka.actor.ActorRef unwatch(akka.actor.ActorCell, akka.actor.ActorRef) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.tellWatchersWeDied.1 1(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.3..anonfun.apply.1 1(akka.actor.dungeon.FaultHandling..anonfun.3) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ChildRestartStats&gt; stats()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class void suspendChildren(akka.actor.ActorCell, scala.collection.immutable.Set) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class scala.collection.immutable.Iterable stats(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.3..anonfun.apply.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer scala.Option&lt;akka.actor.ChildRestartStats&gt; getByRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1 1(akka.actor.ActorCell, akka.actor.Address) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer$ akka.actor.dungeon.ChildrenContainer apply(scala.collection.immutable.TreeMap&lt;java.lang.String,akka.actor.ChildStats&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void handleFailure(akka.actor.ActorCell, akka.dispatch.sysmsg.Failed) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer.class scala.collection.immutable.Iterable children(akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.faultCreate.2 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.terminate.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ scala.Option&lt;akka.actor.ChildRestartStats&gt; getByRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.Children.class akka.actor.ActorRef attachChild(akka.actor.ActorCell, akka.actor.Props, java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.ActorRef actorOf(akka.actor.Props, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ scala.Option&lt;akka.actor.ChildRestartStats&gt; getByRef(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class akka.actor.ActorRef watch(akka.actor.ActorCell, akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.unwatchWatchedActors.1 akka.actor.ActorCell akka$actor$dungeon$DeathWatch$$anonfun$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void watchedActorTerminated(akka.actor.ActorCell, akka.actor.ActorRef, boolean, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ActorRef&gt; children()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout.class void $init$(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class scala.collection.immutable.Set akka$actor$dungeon$DeathWatch$$removeFromSet(akka.actor.ActorCell, akka.actor.ActorRef, scala.collection.immutable.Set) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout.class void setReceiveTimeout(akka.actor.ActorCell, scala.concurrent.duration.Duration) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ scala.collection.immutable.Iterable&lt;akka.actor.ActorRef&gt; children()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1..anonfun.apply.mcV.sp.2 boolean apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void $init$(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer akka.actor.dungeon.ChildrenContainer shallDie(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling.class void handleChildTerminated(akka.actor.ActorCell, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void receivedTerminated(akka.actor.ActorCell, akka.actor.Terminated) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children akka.actor.ActorRef attachChild(akka.actor.Props, java.lang.String, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.2 2(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer akka.actor.dungeon.ChildrenContainer unreserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer scala.collection.immutable.Iterable&lt;akka.actor.ActorRef&gt; children()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer akka.actor.dungeon.ChildrenContainer shallDie(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ReceiveTimeout$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer akka.actor.dungeon.ChildrenContainer add(java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.finishRecreate.1 1(akka.actor.ActorCell, java.lang.Throwable, akka.actor.Actor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Dispatch.class void sendSystemMessage(akka.actor.ActorCell, akka.dispatch.sysmsg.SystemMessage) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void tellWatchersWeDied(akka.actor.ActorCell) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.Children.class scala.Option child(akka.actor.ActorCell, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.Creation akka.actor.dungeon.ChildrenContainer.Creation copy()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.unwatchWatchedActors.1..anonfun.apply.mcV.sp.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class void receivedTerminated(akka.actor.ActorCell, akka.actor.Terminated) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatedChildrenContainer$ akka.actor.dungeon.ChildrenContainer add(java.lang.String, akka.actor.ChildRestartStats)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1..anonfun.apply.mcV.sp.3 3(akka.actor.dungeon.DeathWatch..anonfun.addressTerminated.1) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.UndefinedUidActorRef akka.actor.InternalActorRef getChild(scala.collection.Iterator&lt;java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.terminate.1 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.EmptyChildrenContainer$ akka.actor.dungeon.ChildrenContainer remove(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer akka.actor.dungeon.ChildrenContainer reserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer akka.actor.dungeon.ChildrenContainer.TerminatingChildrenContainer copy(scala.collection.immutable.TreeMap&lt;java.lang.String,akka.actor.ChildStats&gt;, scala.collection.immutable.Set&lt;akka.actor.ActorRef&gt;, akka.actor.dungeon.ChildrenContainer.SuspendReason)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.DeathWatch.class akka.actor.ActorRef watch(akka.actor.ActorCell, akka.actor.ActorRef) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer.NormalChildrenContainer$ akka.actor.dungeon.ChildrenContainer apply(scala.collection.immutable.TreeMap&lt;java.lang.String,akka.actor.ChildStats&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.FaultHandling..anonfun.1 void apply(java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.actor.dungeon.ChildrenContainer akka.actor.dungeon.ChildrenContainer unreserve(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
</root>
