<root>
    <item name='akka.pattern.PromiseActorRef..anonfun.ensureCompleted.1.1 void apply(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.Stopped$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection int hashCode$extension(akka.actor.ActorSelection) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker$ akka.pattern.CircuitBreaker apply(akka.actor.Scheduler, int, scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.HalfOpen$ akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$State$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Open$ scala.concurrent.Future&lt;T&gt; callThrough(scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef$ akka.pattern.PromiseActorRef apply(akka.actor.ActorRefProvider, akka.util.Timeout, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State..anonfun.callThrough.1 1(akka.pattern.CircuitBreaker.State, scala.concurrent.duration.Deadline) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; to(akka.actor.ActorSelection, akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.Stopped$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State.class scala.concurrent.Future callThrough(akka.pattern.CircuitBreaker.State, scala.Function0)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package java.lang.Object gracefulStop$default$3()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.class akka.pattern.PipeToSupport.PipeableFuture pipe(akka.pattern.PipeToSupport, scala.concurrent.Future, scala.concurrent.ExecutionContext)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection$ int hashCode$extension(akka.actor.ActorSelection) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.StoppedWithPath$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Open$ akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$Open$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef akka.pattern.PromiseActorRef apply(akka.actor.ActorRefProvider, akka.util.Timeout, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskSupport.class scala.concurrent.Future ask(akka.pattern.AskSupport, akka.actor.ActorSelection, java.lang.Object, akka.util.Timeout) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef void $bang(java.lang.Object, akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.package scala.concurrent.Future&lt;java.lang.Object&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.StoppedWithPath akka.pattern.PromiseActorRef.StoppedWithPath copy(akka.actor.ActorPath)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; to(akka.actor.ActorRef, akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreakerOpenException java.lang.String $lessinit$greater$default$2()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.StoppedWithPath$ akka.pattern.PromiseActorRef.StoppedWithPath apply(akka.actor.ActorPath)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Open..anonfun._enter.1 1(akka.pattern.CircuitBreaker.Open$) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture..anonfun.pipeToSelection.1 void apply(scala.util.Try&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State.class void notifyTransitionListeners(akka.pattern.CircuitBreaker.State) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.StoppedWithPath$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.StoppedWithPath java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State.class void $init$(akka.pattern.CircuitBreaker.State) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker$ akka.pattern.CircuitBreaker create(akka.actor.Scheduler, int, scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; to(akka.actor.ActorSelection)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef akka.pattern.PromiseActorRef apply(akka.actor.ActorRefProvider, akka.util.Timeout, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef akka.pattern.PromiseActorRef apply(akka.actor.ActorRefProvider, akka.util.Timeout, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.Registering$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns$ scala.concurrent.Future&lt;java.lang.Boolean&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$State$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.PromiseActorRef.Registering$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Closed$ scala.concurrent.Future&lt;T&gt; callThrough(scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef..anonfun.ensureCompleted.1.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker onOpen(scala.Function0&lt;scala.runtime.BoxedUnit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package$ java.lang.Object gracefulStop$default$3()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.HalfOpen$ HalfOpen$(akka.pattern.CircuitBreaker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns$ scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.concurrent.ExecutionContext, scala.concurrent.Future&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Open$ Open$(akka.pattern.CircuitBreaker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns$ scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.concurrent.ExecutionContext, java.util.concurrent.Callable&lt;scala.concurrent.Future&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns$ scala.concurrent.Future&lt;java.lang.Boolean&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection scala.concurrent.Future&lt;java.lang.Object&gt; ask$extension(akka.actor.ActorSelection, java.lang.Object, akka.util.Timeout) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Closed$ Closed$(akka.pattern.CircuitBreaker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State scala.concurrent.Future&lt;T&gt; invoke(scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker onHalfOpen(scala.Function0&lt;scala.runtime.BoxedUnit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.GracefulStopSupport java.lang.Object gracefulStop$default$3()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.PromiseActorRef.Registering$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker onClose(scala.Function0&lt;scala.runtime.BoxedUnit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorRef$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection$ scala.concurrent.Future&lt;java.lang.Object&gt; $qmark$extension(akka.actor.ActorSelection, java.lang.Object, akka.util.Timeout) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef$ akka.pattern.PromiseActorRef apply(akka.actor.ActorRefProvider, akka.util.Timeout, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Closed$ akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$State$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker create(akka.actor.Scheduler, int, scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.GracefulStopSupport.class java.lang.Object gracefulStop$default$3(akka.pattern.GracefulStopSupport)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorRef$ int hashCode$extension(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.FutureTimeoutSupport scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;, scala.concurrent.ExecutionContext) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.package$ scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;, scala.concurrent.ExecutionContext) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package$ akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; pipe(scala.concurrent.Future&lt;T&gt;, scala.concurrent.ExecutionContext)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Open$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef akka.actor.InternalActorRef getChild(scala.collection.Iterator&lt;java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreakerOpenException$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.concurrent.ExecutionContext, scala.concurrent.Future&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.concurrent.ExecutionContext, java.util.concurrent.Callable&lt;scala.concurrent.Future&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; to(akka.actor.ActorRef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State scala.concurrent.Future&lt;T&gt; callThrough(scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.PromiseActorRef.Stopped$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Closed$ scala.concurrent.Future&lt;T&gt; invoke(scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef$ akka.pattern.PromiseActorRef apply(akka.actor.ActorRefProvider, akka.util.Timeout, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.FutureTimeoutSupport.class scala.concurrent.Future after(akka.pattern.FutureTimeoutSupport, scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.Function0, scala.concurrent.ExecutionContext) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package scala.concurrent.Future&lt;T&gt; after(scala.concurrent.duration.FiniteDuration, akka.actor.Scheduler, scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;, scala.concurrent.ExecutionContext) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.GracefulStopSupport.class scala.concurrent.Future gracefulStop(akka.pattern.GracefulStopSupport, akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker onHalfOpen(java.lang.Runnable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture..anonfun.pipeTo.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; pipe(scala.concurrent.Future&lt;T&gt;, scala.concurrent.ExecutionContext)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.CircuitBreaker.State.class void enter(akka.pattern.CircuitBreaker.State) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State.class scala.concurrent.Future callThrough(akka.pattern.CircuitBreaker.State, scala.Function0) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns scala.concurrent.Future&lt;java.lang.Boolean&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection scala.concurrent.Future&lt;java.lang.Object&gt; $qmark$extension(akka.actor.ActorSelection, java.lang.Object, akka.util.Timeout) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.GracefulStopSupport scala.concurrent.Future&lt;java.lang.Object&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='akka.pattern.CircuitBreaker.HalfOpen$ scala.concurrent.Future&lt;T&gt; callThrough(scala.Function0&lt;scala.concurrent.Future&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture..anonfun.pipeTo.1 void apply(scala.util.Try&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.Open$ akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$State$$$outer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; pipe(scala.concurrent.Future&lt;T&gt;, scala.concurrent.ExecutionContext)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker apply(akka.actor.Scheduler, int, scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns scala.concurrent.Future&lt;java.lang.Boolean&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; pipe(scala.concurrent.Future&lt;T&gt;, scala.concurrent.ExecutionContext)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.package$ scala.concurrent.Future&lt;java.lang.Object&gt; gracefulStop(akka.actor.ActorRef, scala.concurrent.duration.FiniteDuration, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker onOpen(java.lang.Runnable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker akka.pattern.CircuitBreaker onClose(java.lang.Runnable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorSelection$ scala.concurrent.Future&lt;java.lang.Object&gt; ask$extension(akka.actor.ActorSelection, java.lang.Object, akka.util.Timeout) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PromiseActorRef.StoppedWithPath$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreakerOpenException$ java.lang.String $lessinit$greater$default$2()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskableActorRef int hashCode$extension(akka.actor.ActorRef) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.AskSupport.class scala.concurrent.Future ask(akka.pattern.AskSupport, akka.actor.ActorRef, java.lang.Object, akka.util.Timeout) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.Patterns$ akka.pattern.PipeToSupport.PipeableFuture&lt;T&gt; pipe(scala.concurrent.Future&lt;T&gt;, scala.concurrent.ExecutionContext)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.CircuitBreaker.State.class void addListener(akka.pattern.CircuitBreaker.State, java.lang.Runnable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='akka.pattern.PipeToSupport.PipeableFuture..anonfun.pipeToSelection.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
