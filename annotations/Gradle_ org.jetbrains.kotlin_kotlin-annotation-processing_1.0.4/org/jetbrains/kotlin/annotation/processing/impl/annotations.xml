<root>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements org.jetbrains.kotlin.java.model.JeName getName(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.ArrayType getArrayType(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject KotlinAbstractFileObject(java.io.File, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.Constants java.lang.String quote(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes KotlinTypes(org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements javax.lang.model.element.Name getBinaryName(javax.lang.model.element.TypeElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject getResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment java.util.Set&lt;javax.lang.model.element.Element&gt; getRootElements()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypesKt void access$assertKindNot(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeKind...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFileObject KotlinFileObject(java.io.File, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.JavaFileObject createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.java.model.types.JePrimitiveType getPrimitiveType(javax.lang.model.type.TypeKind) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror, javax.lang.model.element.AnnotationValue) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 6'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements org.jetbrains.kotlin.java.model.JeName getBinaryName(javax.lang.model.element.TypeElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler void setOnFileCreatedHandler$kotlin_annotation_processing(kotlin.jvm.functions.Function1&lt;? super java.io.File,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.util.Map&lt;? extends javax.lang.model.element.ExecutableElement,javax.lang.model.element.AnnotationValue&gt; getElementValuesWithDefaults(javax.lang.model.element.AnnotationMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElementsKt boolean access$isSubSignature(org.jetbrains.kotlin.com.intellij.psi.PsiMethod, org.jetbrains.kotlin.com.intellij.psi.PsiMethod) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.Writer openWriter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler KotlinFiler(java.io.File, java.io.File, kotlin.jvm.functions.Function1&lt;? super java.io.File,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.DeclaredType getDeclaredType(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment java.util.Set&lt;javax.lang.model.element.Element&gt; getElementsAnnotatedWith(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isAssignable(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.NullType getNullType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject KotlinAbstractFileObject(java.io.File, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.com.intellij.openapi.project.Project getProject$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isSubsignature(javax.lang.model.type.ExecutableType, javax.lang.model.type.ExecutableType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.WildcardType getWildcardType(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject getResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypesKt void access$assertKindNot(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeKind...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes KotlinTypes(org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.TypeMirror capture(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.lang.CharSequence getCharContent(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFileObject KotlinFileObject(java.io.File, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror, javax.lang.model.element.AnnotationValue) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment kotlin.jvm.functions.Function1&lt;java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt; getAppendJavaSourceRootsHandler$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment javax.lang.model.util.Elements getElementUtils()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.lang.String getConstantExpression(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.NoType getNoType(javax.lang.model.type.TypeKind)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.lang.String getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements void printElements(java.io.Writer, javax.lang.model.element.Element...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.Constants java.lang.String format(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler java.io.File getGeneratedSourceDir()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment java.util.Set&lt;javax.lang.model.element.Element&gt; getElementsAnnotatedWith(javax.lang.model.element.TypeElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.DeclaredType getDeclaredType(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler KotlinFiler(java.io.File, java.io.File, kotlin.jvm.functions.Function1&lt;? super java.io.File,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.java.model.types.JeWildcardType getWildcardType(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager getMessager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.InputStream openInputStream()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment java.util.List&lt;javax.annotation.processing.Processor&gt; getProcessors$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes KotlinTypes(org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes java.util.List&lt;javax.lang.model.type.TypeMirror&gt; directSupertypes(javax.lang.model.type.TypeMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAllAnnotationMirrors(javax.lang.model.element.Element)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinJavaFileObject KotlinJavaFileObject(java.io.File, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes java.util.List&lt;javax.lang.model.type.TypeMirror&gt; directSupertypes(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope getScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isSubsignature(javax.lang.model.type.ExecutableType, javax.lang.model.type.ExecutableType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.element.Element asElement(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements boolean hides(javax.lang.model.element.Element, javax.lang.model.element.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler Companion'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.JavaFileObject createClassFile(java.lang.CharSequence, javax.lang.model.element.Element...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.java.model.types.JeNoType getNoType(javax.lang.model.type.TypeKind) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.InputStreamReader openReader(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 8'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypesKt void access$assertJeType(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler KotlinFiler(java.io.File, java.io.File, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElementsKt boolean access$isSubclassOf(org.jetbrains.kotlin.com.intellij.psi.PsiClass, org.jetbrains.kotlin.com.intellij.psi.PsiClass) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinJavaFileObject KotlinJavaFileObject(java.io.File, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade getJavaPsiFacade$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.JavaFileObject createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinJavaFileObject javax.tools.JavaFileObject.Kind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.OutputStreamWriter openWriter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment javax.lang.model.SourceVersion getSourceVersion()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.util.List&lt;javax.lang.model.element.Element&gt; getAllMembers(javax.lang.model.element.TypeElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade getJavaPsiFacade()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.java.model.types.JeNullType getNullType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject getResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 7'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler KotlinFiler(java.io.File, java.io.File, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isAssignable(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.resolve.BindingContext getBindingContext$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements KotlinElements(org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.lang.String getConstantExpression(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.ArrayType getArrayType(javax.lang.model.type.TypeMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements javax.lang.model.element.Name getBinaryName(javax.lang.model.element.TypeElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.util.Map&lt;? extends javax.lang.model.element.ExecutableElement,javax.lang.model.element.AnnotationValue&gt; getElementValuesWithDefaults(javax.lang.model.element.AnnotationMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements org.jetbrains.kotlin.java.model.JeName getBinaryName(javax.lang.model.element.TypeElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.DeclaredType getDeclaredType(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager void printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.Constants java.lang.String quote(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 10'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment java.util.Set&lt;javax.lang.model.element.Element&gt; getElementsAnnotatedWith(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope getProjectScope$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType, javax.lang.model.element.Element) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.Constants java.lang.String quote(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler KotlinFiler(java.io.File, java.io.File, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean contains(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler java.lang.String access$getPACKAGE_INFO_SUFFIX$cp()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements KotlinElements(org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.OutputStream openOutputStream()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment KotlinRoundEnvironment(org.jetbrains.kotlin.annotation.processing.RoundAnnotations, boolean, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.Constants INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.JavaFileObject createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements boolean hides(javax.lang.model.element.Element, javax.lang.model.element.Element) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.FileOutputStream openOutputStream()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.JavaFileObject createClassFile(java.lang.CharSequence, javax.lang.model.element.Element...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.FileObject getResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 9'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler getFiler()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypesKt java.lang.Void access$illegalArg(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements boolean overrides(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement, javax.lang.model.element.TypeElement) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isSameType(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler java.io.File getClassesOutputDir()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.PrimitiveType getPrimitiveType(javax.lang.model.type.TypeKind) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.File getFile()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType, javax.lang.model.element.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment org.jetbrains.kotlin.annotation.processing.RoundAnnotations getRoundAnnotations()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean contains(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAllAnnotationMirrors(javax.lang.model.element.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinJavaFileObject boolean isNameCompatible(java.lang.String, javax.tools.JavaFileObject.Kind) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.element.TypeElement boxedClass(javax.lang.model.type.PrimitiveType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.DeclaredType getDeclaredType(javax.lang.model.type.DeclaredType, javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.lang.String getFileName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements java.util.List&lt;javax.lang.model.element.Element&gt; getAllMembers(javax.lang.model.element.TypeElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler javax.tools.JavaFileObject createClassFile(java.lang.CharSequence, javax.lang.model.element.Element...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.java.model.types.JeNoType getNoType(javax.lang.model.type.TypeKind)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment javax.annotation.processing.Messager getMessager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isSubtype(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements void printElements(java.io.Writer, javax.lang.model.element.Element...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.DeclaredType getDeclaredType(javax.lang.model.type.DeclaredType, javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements boolean overrides(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement, javax.lang.model.element.TypeElement) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment javax.annotation.processing.Filer getFiler()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isSameType(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements boolean isFunctionalInterface(javax.lang.model.element.TypeElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.element.TypeElement boxedClass(javax.lang.model.type.PrimitiveType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinJavaFileObject boolean isNameCompatible(java.lang.String, javax.tools.JavaFileObject.Kind) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment javax.lang.model.util.Types getTypeUtils()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.Reader openReader(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType, javax.lang.model.element.Element)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements javax.lang.model.element.Name getName(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.io.FileInputStream openInputStream()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler kotlin.jvm.functions.Function1&lt;java.io.File,kotlin.Unit&gt; getOnFileCreatedHandler$kotlin_annotation_processing()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.NoType getNoType(javax.lang.model.type.TypeKind) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope getScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.Constants java.lang.String format(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinAbstractFileObject java.lang.String getCharContent(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.PrimitiveType unboxedType(javax.lang.model.type.TypeMirror) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade getJavaPsiFacade()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes boolean isSubtype(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements javax.lang.model.element.PackageElement getPackageOf(javax.lang.model.element.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinRoundEnvironment java.util.Set&lt;javax.lang.model.element.Element&gt; getElementsAnnotatedWith(javax.lang.model.element.TypeElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler KotlinFiler(java.io.File, java.io.File, kotlin.jvm.functions.Function1&lt;? super java.io.File,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinTypes javax.lang.model.type.DeclaredType getDeclaredType(javax.lang.model.type.DeclaredType, javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements boolean overrides(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement, javax.lang.model.element.TypeElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElementsKt boolean access$isSubSignature(org.jetbrains.kotlin.com.intellij.psi.PsiMethod, org.jetbrains.kotlin.com.intellij.psi.PsiMethod) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinProcessingEnvironment KotlinProcessingEnvironment(javax.lang.model.util.Elements, javax.lang.model.util.Types, org.jetbrains.kotlin.annotation.processing.impl.KotlinMessager, java.util.Map&lt;java.lang.String,java.lang.String&gt;, org.jetbrains.kotlin.annotation.processing.impl.KotlinFiler, java.util.List&lt;? extends javax.annotation.processing.Processor&gt;, org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.com.intellij.psi.PsiManager, org.jetbrains.kotlin.com.intellij.psi.JavaPsiFacade, org.jetbrains.kotlin.com.intellij.psi.search.GlobalSearchScope, org.jetbrains.kotlin.resolve.BindingContext, kotlin.jvm.functions.Function1&lt;? super java.util.List&lt;? extends java.io.File&gt;,kotlin.Unit&gt;) 11'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.annotation.processing.impl.KotlinElements javax.lang.model.element.PackageElement getPackageElement(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
