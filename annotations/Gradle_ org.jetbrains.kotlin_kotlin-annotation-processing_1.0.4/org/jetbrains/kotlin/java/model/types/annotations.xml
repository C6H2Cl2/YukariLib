<root>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePsiType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeWithManager.DefaultImpls java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors(org.jetbrains.kotlin.java.model.types.JeTypeWithManager)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePsiType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror JeClassInitializerExecutableTypeMirror(org.jetbrains.kotlin.com.intellij.psi.PsiClassInitializer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePrimitiveType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror JeMethodExecutableTypeMirror(org.jetbrains.kotlin.com.intellij.psi.PsiMethod, org.jetbrains.kotlin.com.intellij.psi.util.MethodSignature, org.jetbrains.kotlin.com.intellij.psi.PsiType, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoType.DefaultImpls A[] getAnnotationsByType(org.jetbrains.kotlin.java.model.types.JeNoType, java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils javax.lang.model.type.TypeMirror toJeType$default(org.jetbrains.kotlin.com.intellij.psi.PsiType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType JeDeclaredType(org.jetbrains.kotlin.com.intellij.psi.PsiClassType, org.jetbrains.kotlin.com.intellij.psi.PsiClass, javax.lang.model.type.DeclaredType, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType javax.lang.model.type.TypeMirror getExtendsBound()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getBounds()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePrimitiveType org.jetbrains.kotlin.com.intellij.psi.PsiPrimitiveType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType javax.lang.model.type.TypeMirror getExtendsBound()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror org.jetbrains.kotlin.com.intellij.psi.PsiClassInitializer getInitializer()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePrimitiveType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror java.util.List&lt;org.jetbrains.kotlin.java.model.types.JeTypeVariableType&gt; getTypeVariables()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeWithManager org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType JeTypeVariableType(org.jetbrains.kotlin.com.intellij.psi.PsiClassType, org.jetbrains.kotlin.com.intellij.psi.PsiTypeParameter) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils org.jetbrains.kotlin.java.model.types.JePrimitiveType toJePrimitiveType(org.jetbrains.kotlin.com.intellij.psi.PsiType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType org.jetbrains.kotlin.java.model.types.JeNoneType getEnclosingType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getThrownTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror java.util.List&lt;javax.lang.model.type.TypeVariable&gt; getTypeVariables()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils javax.lang.model.type.TypeMirror toJeType$default(org.jetbrains.kotlin.com.intellij.psi.PsiType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType JeCapturedWildcardType(org.jetbrains.kotlin.com.intellij.psi.PsiCapturedWildcardType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils javax.lang.model.type.TypeMirror toJeType(org.jetbrains.kotlin.com.intellij.psi.PsiType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType javax.lang.model.type.TypeMirror getComponentType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror org.jetbrains.kotlin.java.model.types.JeNoneType getReceiverType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror javax.lang.model.type.TypeMirror getReceiverType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType JeArrayType(org.jetbrains.kotlin.com.intellij.psi.PsiArrayType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeWithManager.DefaultImpls A[] getAnnotationsByType(org.jetbrains.kotlin.java.model.types.JeTypeWithManager, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType org.jetbrains.kotlin.com.intellij.psi.PsiArrayType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getTypeArguments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getTypeArguments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePrimitiveType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType JeTypeVariableType(org.jetbrains.kotlin.com.intellij.psi.PsiClassType, org.jetbrains.kotlin.com.intellij.psi.PsiTypeParameter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils javax.lang.model.type.TypeMirror toJeType(org.jetbrains.kotlin.com.intellij.psi.PsiType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType org.jetbrains.kotlin.java.model.elements.JeTypeParameterElement asElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType JeCapturedWildcardType(org.jetbrains.kotlin.com.intellij.psi.PsiCapturedWildcardType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType JeDeclaredType(org.jetbrains.kotlin.com.intellij.psi.PsiClassType, org.jetbrains.kotlin.com.intellij.psi.PsiClass, javax.lang.model.type.DeclaredType, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType javax.lang.model.element.Element asElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePrimitiveType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType javax.lang.model.type.TypeMirror getSuperBound()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType JeDeclaredType(org.jetbrains.kotlin.com.intellij.psi.PsiClassType, org.jetbrains.kotlin.com.intellij.psi.PsiClass, javax.lang.model.type.DeclaredType, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils javax.lang.model.type.TypeMirror toJeType$default(org.jetbrains.kotlin.com.intellij.psi.PsiType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror javax.lang.model.type.TypeMirror getReceiverType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoType.DefaultImpls A[] getAnnotationsByType(org.jetbrains.kotlin.java.model.types.JeNoType, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType javax.lang.model.element.Element asElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType org.jetbrains.kotlin.com.intellij.psi.PsiClassType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType JeWildcardType(org.jetbrains.kotlin.com.intellij.psi.PsiWildcardType, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredTypeKt org.jetbrains.kotlin.com.intellij.psi.impl.source.PsiClassReferenceType createDeclaredType(org.jetbrains.kotlin.com.intellij.psi.PsiClass, java.util.List&lt;? extends org.jetbrains.kotlin.com.intellij.psi.PsiType&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType JeDeclaredType(org.jetbrains.kotlin.com.intellij.psi.PsiClassType, org.jetbrains.kotlin.com.intellij.psi.PsiClass, javax.lang.model.type.DeclaredType, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePsiType java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType JeIntersectionType(org.jetbrains.kotlin.com.intellij.psi.PsiIntersectionType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType javax.lang.model.type.TypeMirror getEnclosingType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredTypeKt org.jetbrains.kotlin.com.intellij.psi.impl.source.PsiClassReferenceType createDeclaredType(org.jetbrains.kotlin.com.intellij.psi.PsiClass, java.util.List&lt;? extends org.jetbrains.kotlin.com.intellij.psi.PsiType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror javax.lang.model.type.TypeMirror getReturnType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredTypeKt.createDeclaredType.1 org.jetbrains.kotlin.com.intellij.psi.PsiType[] getTypeParameters()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror.DefaultImpls A[] getAnnotationsByType(org.jetbrains.kotlin.java.model.types.JeTypeMirror, java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getThrownTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror java.util.List&lt;javax.lang.model.type.TypeMirror&gt; getParameterTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType org.jetbrains.kotlin.com.intellij.psi.PsiTypeParameter getParameter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType javax.lang.model.type.TypeMirror getSuperBound()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredErrorType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType javax.lang.model.type.TypeMirror getLowerBound()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType JeIntersectionType(org.jetbrains.kotlin.com.intellij.psi.PsiIntersectionType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType JeArrayType(org.jetbrains.kotlin.com.intellij.psi.PsiArrayType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType org.jetbrains.kotlin.com.intellij.psi.PsiClassType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType org.jetbrains.kotlin.com.intellij.psi.PsiClass getPsiClass()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeUtils javax.lang.model.type.TypeMirror toJeType(org.jetbrains.kotlin.com.intellij.psi.PsiType, org.jetbrains.kotlin.com.intellij.psi.PsiManager, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType javax.lang.model.type.TypeMirror getUpperBound()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePsiType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeCapturedWildcardType org.jetbrains.kotlin.com.intellij.psi.PsiCapturedWildcardType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType org.jetbrains.kotlin.com.intellij.psi.PsiIntersectionType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror org.jetbrains.kotlin.com.intellij.psi.PsiMethod getPsi()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType java.lang.Void getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePrimitiveType JePrimitiveType(org.jetbrains.kotlin.com.intellij.psi.PsiPrimitiveType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeIntersectionType org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror.DefaultImpls java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors(org.jetbrains.kotlin.java.model.types.JeTypeMirror)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoType.DefaultImpls java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors(org.jetbrains.kotlin.java.model.types.JeNoType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror org.jetbrains.kotlin.java.model.types.JeVoidType getReturnType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePsiType java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeDeclaredType org.jetbrains.kotlin.java.model.elements.JeTypeElement asElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror javax.lang.model.type.TypeMirror getReturnType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror A[] getAnnotationsByType(java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeMethodExecutableTypeMirror JeMethodExecutableTypeMirror(org.jetbrains.kotlin.com.intellij.psi.PsiMethod, org.jetbrains.kotlin.com.intellij.psi.util.MethodSignature, org.jetbrains.kotlin.com.intellij.psi.PsiType, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JePackageTypeMirror javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeArrayType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType java.util.List&lt;javax.lang.model.element.AnnotationMirror&gt; getAnnotationMirrors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNoneType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeWithManager.DefaultImpls A[] getAnnotationsByType(org.jetbrains.kotlin.java.model.types.JeTypeWithManager, java.lang.Class&lt;A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeVoidType R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType org.jetbrains.kotlin.com.intellij.psi.PsiManager getPsiManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeNullType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeWildcardType org.jetbrains.kotlin.com.intellij.psi.PsiWildcardType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeErrorType javax.lang.model.type.TypeKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeClassInitializerExecutableTypeMirror R accept(javax.lang.model.type.TypeVisitor&lt;R,P&gt;, P) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeMirror.DefaultImpls A[] getAnnotationsByType(org.jetbrains.kotlin.java.model.types.JeTypeMirror, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.jetbrains.kotlin.java.model.types.JeTypeVariableType org.jetbrains.kotlin.com.intellij.psi.PsiType getPsiType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
