<root>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromNonEmptyElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl$ scala.xml.dtd.ElemDecl apply(java.lang.String, scala.xml.dtd.ContentModel)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ANY$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser scala.xml.dtd.impl.Base.Alt choiceRest(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.ElemName scala.xml.dtd.ContentModel.ElemName copy(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.1 1(scala.xml.dtd.ElementValidator, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.EMPTY$ scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT scala.xml.dtd.DEFAULT copy(boolean, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl scala.xml.dtd.AttListDecl copy(java.lang.String, scala.collection.immutable.List&lt;scala.xml.dtd.AttrDecl&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType scala.xml.dtd.DocType copy(java.lang.String, scala.xml.dtd.ExternalID, scala.collection.Seq&lt;scala.xml.dtd.Decl&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED$ scala.xml.dtd.MIXED apply(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ANY$ scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.Translator$ scala.xml.dtd.impl.WordExp lang()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT..anonfun.toString.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IMPLIED java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException scala.xml.dtd.ValidationException copy(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DTD..anonfun.toString.1 java.lang.Object apply()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ANY scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel..anonfun.scala.xml.dtd.ContentModel..traverse.1.2 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef$ scala.xml.dtd.IntDef apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl$ scala.xml.dtd.ParsedEntityDecl apply(java.lang.String, scala.xml.dtd.EntityDef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl scala.xml.dtd.ParsedEntityDecl copy(java.lang.String, scala.xml.dtd.EntityDef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.6 6(scala.xml.dtd.ElementValidator) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl scala.xml.dtd.AttrDecl copy(java.lang.String, java.lang.String, scala.xml.dtd.DefaultDecl)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel$ scala.collection.immutable.Set&lt;java.lang.String&gt; getLabels(scala.xml.dtd.impl.Base.RegExp) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl scala.xml.dtd.UnparsedEntityDecl copy(java.lang.String, scala.xml.dtd.ExternalID, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromNonEmptyElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID$ scala.xml.dtd.PublicID apply(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel..anonfun.scala.xml.dtd.ContentModel..traverse.1.2 scala.collection.immutable.Set&lt;java.lang.String&gt; apply(scala.xml.dtd.impl.Base.RegExp) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.ElemName$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NoExternalID java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl scala.xml.dtd.NotationDecl apply(java.lang.String, scala.xml.dtd.ExternalID)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser$ scala.xml.dtd.ContentModel parse(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType$ scala.xml.dtd.DocType apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel scala.xml.dtd.ContentModel parse(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IMPLIED scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS scala.xml.dtd.ELEMENTS copy(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT..anonfun.toString.2 2(scala.xml.dtd.DEFAULT) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ANY java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PCDATA$ scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IMPLIED java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference scala.xml.dtd.PEReference copy(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DefaultDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.IMPLIED$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromMissingAttribute(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromUndefinedAttribute(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExternalID scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.2 java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.1..anonfun.find.1.1 1(scala.xml.dtd.ElementValidator..anonfun.check.1, java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MarkupDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.Scanner void accS(scala.collection.Seq&lt;java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef scala.xml.dtd.IntDef apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromMissingAttribute(scala.collection.immutable.Set&lt;java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID scala.xml.dtd.PublicID copy(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IMPLIED$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.EMPTY$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExternalID boolean isSpace(scala.collection.Seq&lt;java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID scala.xml.MetaData attribute()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl..anonfun.toString.1 1(scala.xml.dtd.AttrDecl) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser scala.xml.dtd.ContentModel parse(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType scala.xml.dtd.DocType apply(java.lang.String, scala.xml.dtd.ExternalID, scala.collection.Seq&lt;scala.xml.dtd.Decl&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.1 boolean apply(scala.xml.Node) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl$ scala.xml.dtd.AttrDecl apply(java.lang.String, java.lang.String, scala.xml.dtd.DefaultDecl)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExternalID java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.ContentModelParser scala.xml.dtd.ContentModel contentspec()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NoExternalID$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID scala.xml.dtd.SystemID apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator scala.collection.Iterable&lt;scala.xml.dtd.ContentModel.ElemName&gt; getIterable(scala.collection.Seq&lt;scala.xml.Node&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExternalID boolean isValidIANAEncoding(scala.collection.Seq&lt;java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromMissingAttribute(scala.collection.immutable.Set&lt;java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID java.lang.String label()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID$ scala.xml.dtd.SystemID apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.2 scala.xml.dtd.ContentModel.ElemName apply(scala.xml.Node)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser$ scala.xml.dtd.ContentModel contentspec()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID scala.xml.dtd.SystemID copy(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT..anonfun.toString.2 void apply(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.getIterable.2 scala.xml.dtd.ContentModel.ElemName apply(scala.xml.Node) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID scala.xml.dtd.PublicID apply(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DTD..anonfun.toString.1 java.lang.String apply()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PCDATA scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType scala.xml.dtd.DocType apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference$ scala.xml.dtd.PEReference apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl scala.xml.dtd.NotationDecl copy(java.lang.String, scala.xml.dtd.ExternalID)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel$ scala.xml.dtd.ContentModel parse(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.3 java.lang.String apply(scala.xml.dtd.ContentModel.ElemName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.ElemName$ scala.xml.dtd.ContentModel.ElemName apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromMissingAttribute(scala.collection.immutable.Set&lt;java.lang.String&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NoExternalID$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.EMPTY$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromMissingAttribute(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.2 2(scala.xml.dtd.ElementValidator, scala.collection.mutable.BitSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromUndefinedAttribute(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.Translator$ scala.xml.dtd.ContentModel$ lang()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.Scanner..anonfun.accS.1 1(scala.xml.dtd.Scanner) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.ElemName java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.ContentModel$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.ElemName$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType$ scala.xml.dtd.DocType apply(java.lang.String, scala.xml.dtd.ExternalID, scala.collection.Seq&lt;scala.xml.dtd.Decl&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT$ scala.xml.dtd.DEFAULT apply(boolean, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl scala.xml.dtd.ElemDecl apply(java.lang.String, scala.xml.dtd.ContentModel)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromUndefinedElement(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl scala.xml.dtd.AttrDecl apply(java.lang.String, java.lang.String, scala.xml.dtd.DefaultDecl)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PCDATA java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef scala.xml.dtd.IntDef copy(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.4 4(scala.xml.dtd.ElementValidator, scala.collection.Seq) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS$ scala.xml.dtd.ELEMENTS apply(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl scala.xml.dtd.ParameterEntityDecl copy(java.lang.String, scala.xml.dtd.EntityDef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel$ scala.collection.immutable.Set scala$xml$dtd$ContentModel$$traverse$1(scala.xml.dtd.impl.Base.RegExp) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS scala.xml.dtd.ELEMENTS apply(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.1 1(scala.xml.dtd.ElementValidator, scala.collection.mutable.BitSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl$ scala.xml.dtd.UnparsedEntityDecl apply(java.lang.String, scala.xml.dtd.ExternalID, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ANY$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.ElemName$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef$ scala.xml.dtd.ExtDef apply(scala.xml.dtd.ExternalID)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromUndefinedElement(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PCDATA$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromMissingAttribute(scala.collection.immutable.Set&lt;java.lang.String&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef scala.xml.dtd.ExtDef copy(scala.xml.dtd.ExternalID)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.Scanner boolean isSpace(scala.collection.Seq&lt;java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.SystemID$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel..anonfun.scala.xml.dtd.ContentModel..traverse.1.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.EntityDef scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.MakeValidationException scala.xml.dtd.ValidationException fromFixedAttribute(java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator boolean scala$xml$dtd$ElementValidator$$isAllWhitespace$1(scala.xml.Atom) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.Translator$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser$ scala.xml.dtd.impl.Base.Alt choiceRest(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl$ scala.xml.dtd.AttListDecl apply(java.lang.String, scala.collection.immutable.List&lt;scala.xml.dtd.AttrDecl&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException$ scala.xml.dtd.ValidationException apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.3 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException scala.xml.dtd.ValidationException apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl$ scala.xml.dtd.NotationDecl apply(java.lang.String, scala.xml.dtd.ExternalID)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IMPLIED$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser scala.xml.dtd.impl.WordExp.Letter atom()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl$ java.lang.Object apply(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED$ scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator boolean scala$xml$dtd$ElementValidator$$find$2(java.lang.String, scala.collection.Seq) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl scala.xml.dtd.ParameterEntityDecl apply(java.lang.String, scala.xml.dtd.EntityDef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef$ java.lang.Object apply(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IMPLIED$ scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.EMPTY java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl..anonfun.toString.1 void apply(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED scala.xml.dtd.MIXED apply(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MIXED$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl$ scala.xml.dtd.ParameterEntityDecl apply(java.lang.String, scala.xml.dtd.EntityDef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.Scanner boolean isValidIANAEncoding(scala.collection.Seq&lt;java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT scala.xml.dtd.DEFAULT apply(boolean, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl scala.xml.dtd.ElemDecl copy(java.lang.String, scala.xml.dtd.ContentModel)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PCDATA$ java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl scala.xml.dtd.AttListDecl apply(java.lang.String, scala.collection.immutable.List&lt;scala.xml.dtd.AttrDecl&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PEReference scala.xml.dtd.PEReference apply(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl..anonfun.toString.1 java.lang.Object apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParsedEntityDecl scala.xml.dtd.ParsedEntityDecl apply(java.lang.String, scala.xml.dtd.EntityDef)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ValidationException java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ELEMENTS scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.MIXED scala.xml.dtd.MIXED copy(scala.xml.dtd.impl.Base.RegExp)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel.Translator$ scala.xml.dtd.impl.Base lang()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttListDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel..anonfun.scala.xml.dtd.ContentModel..traverse.1.1 scala.collection.immutable.Set&lt;java.lang.String&gt; apply(scala.xml.dtd.impl.Base.RegExp) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel scala.collection.immutable.Set&lt;java.lang.String&gt; getLabels(scala.xml.dtd.impl.Base.RegExp) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElemDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModelParser$ scala.xml.dtd.impl.WordExp.Letter atom()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DefaultDecl java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='scala.xml.dtd.DEFAULT$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.UnparsedEntityDecl scala.xml.dtd.UnparsedEntityDecl apply(java.lang.String, scala.xml.dtd.ExternalID, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.EMPTY scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.IntDef$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.PublicID$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DocType java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator boolean check(scala.xml.MetaData) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ParameterEntityDecl scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.NotationDecl$ java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.REQUIRED$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.5 5(scala.xml.dtd.ElementValidator) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ContentModel..anonfun.toString.1 1(scala.xml.dtd.ContentModel) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.AttrDecl java.lang.String productPrefix()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.DEFAULT scala.collection.mutable.StringBuilder buildString(scala.collection.mutable.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ MODULE$'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ExtDef scala.xml.dtd.ExtDef apply(scala.xml.dtd.ExternalID)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.ElementValidator..anonfun.check.1 void apply(scala.xml.MetaData) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.MakeValidationException$ scala.xml.dtd.ValidationException fromFixedAttribute(java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='scala.xml.dtd.Tokens java.lang.String token2string(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
