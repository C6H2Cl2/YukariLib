buildscript {
    ext.kotlin_version = '1.1.2-2'
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "kotlin"

tasks.withType(Jar) {
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
sourceCompatibility = targetCompatibility = "1.8"

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        includeRuntime = true
    }
}

version = "1.3.0-b0"
group= "c6h2cl2.YukariLib"
archivesBaseName = "YukariLib-1.12"

minecraft {
    version = "1.12-14.21.0.2321"
    runDir = "run"
    mappings = "snapshot_20161220"
    makeObfSourceJar = false
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    embed "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    embed "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

jar {
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    /*
    manifest {
        attributes 'FMLCorePlugin': 'c6h2cl2.YukariLib.ASM.YukariLibLoadingPlugin'
        attributes 'FMLCorePluginContainsMod': 'true'
    }
    */
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    from sourceSets.main.allSource
    from sourceSets.api.allSource
    classifier = 'dev'
}
